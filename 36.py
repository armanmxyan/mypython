

def check_sudoku(board):

    for n in range(9):
        l_V=[]
        for i in board[n]:
            if i.isnumeric():
                if board[n].count(i)>1:return False 
        else:
            l_V=[board[k][n] for k in range(9) if board[k][n].isnumeric()]
            for i in l_V:
                if i.isnumeric():
                    if l_V.count(i)>1:return False
        l_V=[]
        k=n//3
        l_V=board[3*k][0+3*(n-3*k):3+3*(n-3*k)]+board[3*k+1][0+3*(n-3*k):3+3*(n-3*k)]+board[3*k+2][0+3*(n-3*k):3+3*(n-3*k)]
        for i in l_V:
            if i.isnumeric():                 
                if l_V.count(i)>1:return False

    else:return True

board1 =[ ["8", "3", ".", ".", "7", ".", ".", ".", "."]
        , ["6", ".", ".", "1", "9", "5", ".", ".", "."]
        , [".", "9", "8", ".", ".", ".", ".", "6", "."]
        , ["8", ".", ".", ".", "6", ".", ".", ".", "3"]
        , ["4", ".", ".", "8", ".", "3", ".", ".", "1"]
        , ["7", ".", ".", ".", "2", ".", ".", ".", "6"]
        , [".", "6", ".", ".", ".", ".", "2", "8", "."]
        , [".", ".", ".", "4", "1", "9", ".", ".", "5"]
        , [".", ".", ".", ".", "8", ".", ".", "7", "9"]]


board = [["5", "3", ".", ".", "7", ".", ".", ".", "."]
        ,["6", ".", ".", "1", "9", "5", ".", ".", "."]        
        ,[".", "9", "8", ".", ".", ".", ".", "6", "."]
        ,["8", ".", ".", ".", "6", ".", ".", ".", "3"]
        ,["4", ".", ".", "8", ".", "3", ".", ".", "1"]
        ,["7", ".", "." ,"." ,"2" ,".", ".", ".", "6"]
        ,[".", "6", ".", ".", ".", ".", "2", "8", "."]
        ,[".", ".", ".", "4", "1", "9", ".", ".", "5"]
        ,[".", ".", ".", ".", "8", ".", ".", "7", "9"]]
        
print(check_sudoku(board))